# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())

# Required packages for this exercise.
require(rjags)
require(coda)
source("DBDA2E-utilities.R")



## The distributions that we use here are available in R, but for clarity are made explicit here.

# Bernoulli(z,N | theta)
bernoulli_pdf <- function(theta, z, N) {
  # Computes p(z,N|theta) = Bernoulli(theta|z,N)
  pdf = theta^z * (1 - theta)^(N - z)
  return(pdf)
}

# beta(theta | a, b)
beta_pdf <- function(theta, a, b) {
  # Computes p(theta|a,b) = beta(theta|a,b)
  pdf = theta^(a - 1) * (1 - theta)^(b - 1)
  return(pdf)
}

# B(a+z, N-z+b) / B(a,b)
beta_bernoulli_evidence <- function(a, b, N, z) {
  return( beta( z+a, N-z+b ) / beta( a, b ) ) # not numerically stable
}


##########################

# Observations: 6 heads out of 9 flips
theta = seq(0, 1, by = 0.01)

# Observations: 6 heads out of 9 flips
z = 8
N = 12

# Hyperparameters
a1 = 5
b1 = a1
a2 = 2
b2 = 2



prior1                      = beta_pdf(theta, a = a1, b = b1)
prior2                      = beta_pdf(theta, a = a2, b = b2)

# Plot the probability density functions

par(mfrow=c(2,3))
plot(theta, prior1, type='l')
title('Prior 1 ')

plot(theta, prior2, type='l')
title('Prior 2 ')

# THE MODEL
model_comparison_model1.string = "
model {
## Prior
a<-2
b<-2
m_prob[1] <- 0.5
m_prob[2] <- 0.5
m ~ dcat( m_prob[] )

theta ~ dbeta( a[m], b[m] )
## Likelihood
for (i in 1:N) {    
x[i] ~ dbern( theta )
}
}
"

model_comparison_model2.string = "
model {
## Prior
a=2
b=2

m_prob[1] <- 0.5
m_prob[2] <- 0.5
m ~ dcat( m_prob[] )

theta_m1 =0.5
theta_m2 ~ dbeta( a,b  )

theta <- equals(m,1) * theta_m1 + equals(m,2) * theta_m2
## Likelihood
for (i in 1:N) {    
x[i] ~ dbern( theta )
}
}
"


model_comparison_model.spec = textConnection(model_comparison_model2.string)

# SAMPLING PARAMETERS
niter = 10000
nchains = 4

# Construct the object containing both the model specification as well as the data and some sampling parameters.
jagsmodel1 <- jags.model(model_comparison_model.spec,
                         data = list('N' = 20, 
                                     'x' = (x = c(rep(1, 10), rep(0, 10)))
                         ),
                         n.chains = nchains)

# Collect samples to approximate the posterior distribution.
model1samples = coda.samples(jagsmodel1,
                             c('m', 'theta'),
                             n.iter = niter)

mcmcMat = as.matrix( model1samples , chains=TRUE )
m = mcmcMat[,"m"]
theta = mcmcMat[,"theta"]

posterior_model1_mcmc = sum(m==1) / length(m)
posterior_model2_mcmc = 1 - posterior_model1_mcmc

theta_given_m1 = theta[m==1]
theta_given_m2 = theta[m==2]

par(mfrow=c(1,3))
hist(x = m)
hist(x = theta_given_m1)
hist(x = theta_given_m2)
